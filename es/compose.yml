services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: labk8s1\n"\
          "    dns:\n"\
          "      - labk8s1\n"\
          "    ip:\n"\
          "      - 172.16.1.61\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;

        echo "Waiting for Elasticsearch availability";
        until curl -v --cacert config/certs/ca/ca.crt https://labk8s1:9200 | grep -q "missing authentication credentials"; do sleep 30; done;

        echo "Setting kibana_system password for Labk8s1";
        until curl -v -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://labk8s1:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/labk8s1/labk8s1.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - /data/es/data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend
    restart: always
    environment:
      - cluster.name=${CLUSTER_NAME}
      - node.name=labk8s1
      - cluster.initial_master_nodes=labk8s1
      #- discovery.seed_hosts=labk8s1
      - network.bind_host=0.0.0.0
      - network.publish_host=172.16.1.61
      - bootstrap.memory_lock=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/labk8s1/labk8s1.key
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.http.ssl.certificate=certs/labk8s1/labk8s1.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.client_authentication=required
      - xpack.security.transport.ssl.key=certs/labk8s1/labk8s1.key
      - xpack.security.transport.ssl.certificate=certs/labk8s1/labk8s1.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/labk8s1/labk8s1.crt https://labk8s1:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - /data/kibana/data:/usr/share/kibana/data
    restart: always
    ports:
      - 5601:5601
    networks:
      - backend
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=["https://labk8s1:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - SERVER_SSL_CERTIFICATE=config/certs/labk8s1/labk8s1.crt
      - SERVER_SSL_KEY=config/certs/labk8s1/labk8s1.key
      - SERVER_SSL_ENABLED=true
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY="83268d1d2158f11d9bedf55d52125430"
      - XPACK_REPORTING_ENCRYPTIONKEY="83c3f9a1483dc51dff2dda02c0da6ed3"
      - XPACK_SECURITY_ENCRYPTIONKEY="798523280b9207fc30e264c3dac7f3e5"
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs/ca:/etc/nginx/conf.d/certs:ro
    ports:
      - "443:443"
    networks:
      - backend
networks:
  backend:
    name: elk-stack-net
    driver: bridge
